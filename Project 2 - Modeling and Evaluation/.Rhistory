}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
dfBinary2 = do.call("cbind", list(dfTop10Genre, top10Directorsdf, top10Actorsdf,
wins, nominations, top10Countriesdf,  top10Languagesdf,
top10Writersdf, top10Productiondf, releaseMonthdf, ratingdf))
dfBinary3= cbind(dfBinary2, df$imdbID)
names(dfBinary3)[names(dfBinary3)=="df$imdbID"] = "imdbID"
df8 = merge(dfBinary3,df,by="imdbID")
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+imdbRating + I(imdbRating ^2) + poly(imdbVotes,2) + poly(tomatoRating,2)+ sqrt(tomatoFresh) + sqrt(tomatoRotten) + poly(tomatoUserMeter,4) +
poly(tomatoUserRating,2) +sqrt(tomatoUserReviews)+ poly(Budget,2) + budge + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r + unrated +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins+ nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+j.davidstem+ jackkirby+
marlonwayans+stanlee+stuartbeattie+woodyallen+johnlogan+tedelliott+terryrossio+
lucbesson+ columbiapictures+ waltdisneypictures+lionsgatefilms+sonypicturesclassics+newlinecinema+
paramountpictures+ sonypictures+ thcenturyfox + universalpictures + warnerbrospictures +fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy+drama, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
# TODO: Build & evaluate model 5 (numeric, non-numeric and additional features)
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+ + imdbRating *  tomatoRating + poly(imdbVotes,2) + sqrt(tomatoRotten) + tomatoUserMeter *tomatoUserRating  *sqrt(tomatoUserReviews)
+ Budget * tomatoFresh  + budge + drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r + unrated +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins+ nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+ + imdbRating *  tomatoRating + poly(imdbVotes,2) + sqrt(tomatoRotten) + tomatoUserMeter * tomatoUserRating *sqrt(tomatoUserReviews)
+ Budget * tomatoFresh  + drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + pg + pg13 + r +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins+ nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
#Test 3
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+Runtime * tomatoRating  +imdbVotes + wins + nominations +tomatoRating + Budget +sqrt(tomatoRotten)  +tomatoUserMeter + imdbRating +
+ poly(tomatoUserRating,2) +sqrt(tomatoUserReviews) + budge + drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r + unrated +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins+ nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+j.davidstem+ jackkirby+
marlonwayans+stanlee+stuartbeattie+woodyallen+johnlogan+tedelliott+terryrossio+
lucbesson+ columbiapictures+ waltdisneypictures+lionsgatefilms+sonypicturesclassics+newlinecinema+
paramountpictures+ sonypictures+ thcenturyfox + universalpictures + warnerbrospictures +fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+imdbRating + imdbRating * tomatoRating +  poly(imdbVotes,2) + sqrt(tomatoFresh) + sqrt(tomatoRotten) + poly(tomatoUserMeter,4) +
poly(tomatoUserRating,2) +sqrt(tomatoUserReviews)+ poly(Budget,2) + budge * drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r + unrated +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins+ nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+j.davidstem+ jackkirby+
marlonwayans+stanlee+stuartbeattie+woodyallen+johnlogan+tedelliott+terryrossio+
lucbesson+ columbiapictures+ waltdisneypictures+lionsgatefilms+sonypicturesclassics+newlinecinema+
paramountpictures+ sonypictures+ thcenturyfox + universalpictures + warnerbrospictures +fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+imdbRating + I(imdbRating ^2) + poly(imdbVotes,2) + poly(tomatoRating,2)+ sqrt(tomatoFresh) * Budget * wins * nominations + sqrt(tomatoRotten) + poly(tomatoUserMeter,4) +
poly(tomatoUserRating,2) +sqrt(tomatoUserReviews) + budge * drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r + unrated +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro +china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+j.davidstem+ jackkirby+
marlonwayans+stanlee+stuartbeattie+woodyallen+johnlogan+tedelliott+terryrossio+
lucbesson+ columbiapictures+ waltdisneypictures+lionsgatefilms+sonypicturesclassics+newlinecinema+
paramountpictures+ sonypictures+ thcenturyfox + universalpictures + warnerbrospictures +fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime) +poly(imdbVotes,2) * wins * nominations + tomatoRating * Budget +sqrt(tomatoRotten)  +tomatoUserMeter *imdbRating +
+ poly(tomatoUserRating,2) +sqrt(tomatoUserReviews) + budge * drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r + unrated +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins+ nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+j.davidstem+ jackkirby+
marlonwayans+stanlee+stuartbeattie+woodyallen+johnlogan+tedelliott+terryrossio+
lucbesson+ columbiapictures+ waltdisneypictures+lionsgatefilms+sonypicturesclassics+newlinecinema+
paramountpictures+ sonypictures+ thcenturyfox + universalpictures + warnerbrospictures +fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+ + imdbRating *  tomatoRating + poly(imdbVotes,2) + sqrt(tomatoRotten) + tomatoUserMeter * tomatoUserRating *sqrt(tomatoUserReviews)
+ Budget * tomatoFresh  + drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + pg + pg13 + r +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins * nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+ imdbRating *  tomatoRating + poly(imdbVotes,2) + sqrt(tomatoRotten) + tomatoUserMeter * tomatoUserRating *sqrt(tomatoUserReviews)
+ Budget * tomatoFresh  + drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + pg + pg13 + r +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+ wins * nominations+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
#Final
training_size = (seq(.05, 0.95, .05))
testing_size = (seq(.95, 0.05, -.05))
sizes = (seq(1,19,1))
training_rmse = vector("numeric", 19L)
testing_rmse = vector("numeric", 19L)
train_rmse_avg = 0
test_rmse_avg = 0
set.seed(5)
for (i in 1:19){
for (l in 1:50){
trainNumbers = sample(seq_len(nrow(df8)), replace=F,size=floor(training_size[i]*nrow(df8)))
train = df8[trainNumbers,]
test = df8[-trainNumbers,]
M1 = lm(Gross~Year+log10(Runtime)+ + imdbRating *  tomatoRating * nominations + poly(imdbVotes,2) * wins + sqrt(tomatoRotten) + tomatoUserMeter * tomatoUserRating *sqrt(tomatoUserReviews)
+ Budget * tomatoFresh  + budge + drama + run + apr + aug + dec + feb+ jan+ jul+ jun +mar+ may +nov +oct +sep + g + n.a + nc17 + notrated + pg + pg13 + r +
woodyallen1 +stevensoderbergh+ridleyscott+stevenspielberg+shawnlevy+clinteastwood+ronhoward+robertrodriguez+peterjackson+peterfarrelly+jackblack +mattdamon+robertdowneyjr.+johnnydepp+markwahlberg+adamsandler+benstiller+
samuell.jackson+owenwilson+robertdeniro+china +ireland+italy+japan+spain+australia +canada +france +germany+usa+latin+ arabic+mandarin+japanese+italian+russian+german+french+spanish+english+fantasy + mystery +
horror+ thriller+ crime +romance+adventure+action+comedy, train);
pred_train = predict(M1, train)
pred_test = predict(M1,test)
train_rmse_avg =  train_rmse_avg + rmse(pred_train,train$Gross)
test_rmse_avg = test_rmse_avg + rmse(pred_test,test$Gross)
if(l == 50){
train_avg = train_rmse_avg/50
training_rmse[i] = train_avg
train_rmse_avg = 0
test_avg = test_rmse_avg/50
testing_rmse[i] = test_avg
test_rmse_avg = 0
}
}
}
dfAccuracyProblem1 = data.frame(training_rmse, testing_rmse)
training_size_graph_seq = (seq(.05, 0.95, .05))
train_size_graph = data.frame(training_size_graph_seq)
dfAccuracyProblem1 = dfAccuracyProblem1[seq(dim(dfAccuracyProblem1)[1],1),]
dfAccuracyProblem1 <- apply(dfAccuracyProblem1, 2, rev)
dfAccuracyProblem1 = data.frame(dfAccuracyProblem1)
ggplot(train_size_graph, aes(training_size_graph_seq)) +
geom_line(aes(y = dfAccuracyProblem1$training_rmse, colour = "Training RMSE")) +
geom_line(aes(y = dfAccuracyProblem1$testing_rmse, colour = "Testing RMSE"))+
scale_x_continuous(breaks = pretty(train_size_graph$training_size_graph_seq, n = 19))+
xlab("Training sizes 5% to 95%") +
ylab("RMSE") +
ggtitle("Learning Curve")
print(paste("Lowest Training RMSE:", min(training_rmse), sep = " "))
print(paste("Lowest Testing RMSE", min(testing_rmse), sep = " "))
