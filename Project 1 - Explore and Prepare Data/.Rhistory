mean_runtime_romance,
mean_runtime_thriller,
mean_runtime_horror,
mean_runtime_scifi,
mean_runtime_mystery)
top10meanruntime = data.frame(genre=top_ten_genre_labels,runtime=mean_top_ten_runtime_genre)
ggplot(top10meanruntime, aes(x = reorder(genre, -runtime), y = runtime)) +
geom_bar(stat="identity") +
labs(x="Top 10 Genres", y="Mean Runtime", title="Mean Runtime Vs Top 10 Genres")
# TODO: Remove rows with Released-Year mismatch
missmached = function(col1,col2){
seq_Col = seq_along(col1)
total_gross_entries = c()
notequal = c()
split = c()
for(i in seq_Col){
split_On_Dashes = strsplit(as.character(df$Released[i]), '-')[[1]]
if(is.na(split_On_Dashes[1])){
split_On_Dashes = 0
split = append(split,as.numeric(split_On_Dashes))
}
else{
split = append(split,as.numeric(split_On_Dashes[1]))
}
}
return (split)
}
splitReleased = missmached(df$Released, df$Year)
compareYearVsReleasedYear = df$Year == splitReleased
combinedDf = data.frame(df$Title, df$imdbID, df$Gross, df$Year, splitReleased, compareYearVsReleasedYear)
ten_percent = round((length(df$Gross) * .10))
print (ten_percent)
combinedDf = subset(combinedDf, splitReleased != 0)
combinedDf = subset(combinedDf, compareYearVsReleasedYear== FALSE)
combinedDf = combinedDf[1:ten_percent,]
df = df[!(df$imdbID %in% combinedDf$df.imdbID),]
df = subset(df, !is.na(Released))
# TODO: Investigate if Gross Revenue is related to Budget, Runtime or Genre
df = subset(df, !is.na(Gross))
total_gross_drama = sum(df$Gross[which(df$drama==1)])
total_gross_comedy = sum(df$Gross[which(df$comedy==1)])
total_gross_action= sum(df$Gross[which(df$action==1)])
total_gross_adventure = sum(df$Gross[which(df$adventure==1)])
total_gross_crime = sum(df$Gross[which(df$crime==1)])
total_gross_romance = sum(df$Gross[which(df$romance==1)])
total_gross_thriller = sum(df$Gross[which(df$thriller==1)])
total_gross_horror = sum(df$Gross[which(df$horror==1)])
total_gross_scifi = sum(df$Gross[which(df$scifi==1)])
total_gross_mystery = sum(df$Gross[which(df$mystery==1)])
total_gross_adult = sum(df$Gross[which(df$adult==1)])
total_gross_animation = sum(df$Gross[which(df$animation==1)])
total_gross_biography = sum(df$Gross[which(df$biography==1)])
total_gross_documentary = sum(df$Gross[which(df$documentary==1)])
total_gross_family = sum(df$Gross[which(df$family==1)])
total_gross_fantasy = sum(df$Gross[which(df$fantasy==1)])
total_gross_filmnoir = sum(df$Gross[which(df$filmnoir==1)])
total_gross_history = sum(df$Gross[which(df$history==1)])
total_gross_music = sum(df$Gross[which(df$music==1)])
total_gross_musical = sum(df$Gross[which(df$musical==1)])
total_gross_news = sum(df$Gross[which(df$news==1)])
total_gross_short = sum(df$Gross[which(df$short==1)])
total_gross_sport = sum(df$Gross[which(df$sport==1)])
total_gross_war = sum(df$Gross[which(df$war==1)])
total_gross_western = sum(df$Gross[which(df$western==1)])
genre_labels = c("drama", "comedy", "action", "adventure", "crime", "romance", "thriller", "horror", "scifi", "mystery",
"adult", "animation", "biography", "documentary", "family", "fantasy", "filmnoir", "history",
"music", "musical", "news", "short", "sport", "war", "western")
totals_gross_genre = c(total_gross_drama,
total_gross_comedy,
total_gross_adventure,
total_gross_action,
total_gross_crime,
total_gross_romance,
total_gross_thriller,
total_gross_horror,
total_gross_scifi,
total_gross_mystery,
total_gross_adult,
total_gross_animation,
total_gross_biography,
total_gross_documentary,
total_gross_family,
total_gross_fantasy,
total_gross_filmnoir,
total_gross_history,
total_gross_music,
total_gross_musical,
total_gross_news,
total_gross_short,
total_gross_sport,
total_gross_war,
total_gross_western)
gross_genere_totals = data.frame(genre=genre_labels, gross_Totals=totals_gross_genre)
ggplot(gross_genere_totals, aes(x = reorder(genre, -gross_Totals), y = gross_Totals)) +
geom_bar(stat="identity") +
labs(x="Genre",y="Gross Totals ($)") +
ggtitle("Gross Total ($) Vs. Genre")
mean_gross_drama = mean(df$Gross[which(df$drama==1)])
mean_gross_comedy = mean(df$Gross[which(df$comedy==1)])
mean_gross_action= mean(df$Gross[which(df$action==1)])
mean_gross_adventure = mean(df$Gross[which(df$adventure==1)])
mean_gross_crime = mean(df$Gross[which(df$crime==1)])
mean_gross_romance = mean(df$Gross[which(df$romance==1)])
mean_gross_thriller = mean(df$Gross[which(df$thriller==1)])
mean_gross_horror = mean(df$Gross[which(df$horror==1)])
mean_gross_scifi = mean(df$Gross[which(df$scifi==1)])
mean_gross_mystery = mean(df$Gross[which(df$mystery==1)])
mean_gross_adult = mean(df$Gross[which(df$adult==1)])
mean_gross_animation = mean(df$Gross[which(df$animation==1)])
mean_gross_biography = mean(df$Gross[which(df$biography==1)])
mean_gross_documentary = mean(df$Gross[which(df$documentary==1)])
mean_gross_family = mean(df$Gross[which(df$family==1)])
mean_gross_fantasy = mean(df$Gross[which(df$fantasy==1)])
mean_gross_filmnoir = mean(df$Gross[which(df$filmnoir==1)])
mean_gross_history = mean(df$Gross[which(df$history==1)])
mean_gross_music = mean(df$Gross[which(df$music==1)])
mean_gross_musical = mean(df$Gross[which(df$musical==1)])
mean_gross_news = mean(df$Gross[which(df$news==1)])
mean_gross_short = mean(df$Gross[which(df$short==1)])
mean_gross_sport = mean(df$Gross[which(df$sport==1)])
mean_gross_war = mean(df$Gross[which(df$war==1)])
mean_gross_western = mean(df$Gross[which(df$western==1)])
genre_labels_mean = c("drama", "comedy", "action", "adventure", "crime", "romance", "thriller", "horror", "scifi", "mystery",
"adult", "animation", "biography", "documentary", "family", "fantasy", "filmnoir", "history",
"music", "musical", "news", "short", "sport", "war", "western")
mean_gross_genre = c(mean_gross_drama,
mean_gross_comedy,
mean_gross_adventure,
mean_gross_action,
mean_gross_crime,
mean_gross_romance,
mean_gross_thriller,
mean_gross_horror,
mean_gross_scifi,
mean_gross_mystery,
mean_gross_adult,
mean_gross_animation,
mean_gross_biography,
mean_gross_documentary,
mean_gross_family,
mean_gross_fantasy,
mean_gross_filmnoir,
mean_gross_history,
mean_gross_music,
mean_gross_musical,
mean_gross_news,
mean_gross_short,
mean_gross_sport,
mean_gross_war,
mean_gross_western)
gross_genere_mean = data.frame(genre=genre_labels_mean, gross_Mean=mean_gross_genre)
ggplot(gross_genere_mean , aes(x = reorder(genre, -gross_Mean), y = gross_Mean)) +
geom_bar(stat="identity") +
labs(x="Genre",y="Gross Mean ($)") +
ggtitle("Gross Mean ($) Vs. Genre")
df$timeInter = findInterval(df$Runtime, seq(0, 325, by = 25))
df$timeInter[df$timeInter==1] = '0-25'
df$timeInter[df$timeInter==2] = '25-50'
df$timeInter[df$timeInter==3] = '50-75'
df$timeInter[df$timeInter==4] = '75-100'
df$timeInter[df$timeInter==5] = '100-125'
df$timeInter[df$timeInter==6] = '125-150'
df$timeInter[df$timeInter==7] = '150-175'
df$timeInter[df$timeInter==8] = '175-200'
df$timeInter[df$timeInter==9] = '200-225'
df$timeInter[df$timeInter==10] = '225-250'
df$timeInter[df$timeInter==11] = '250-275'
df$timeInter[df$timeInter==12] = '275-300'
df$timeInter[df$timeInter==13] = '300-325'
df$timeInter[df$timeInter==14] = '325'
total_gross_0_25 =  sum(df$Gross[which(df$timeInter=='0-25')])
total_gross_25_50 = sum(df$Gross[which(df$timeInter=='25-50')])
total_gross_50_75 = sum(df$Gross[which(df$timeInter=='50-75')])
total_gross_75_100 = sum(df$Gross[which(df$timeInter=='75-100')])
total_gross_100_125 = sum(df$Gross[which(df$timeInter=='100-125')])
total_gross_125_250 = sum(df$Gross[which(df$timeInter=='125-150')])
total_gross_150_175 = sum(df$Gross[which(df$timeInter=='150-175')])
total_gross_175_200 = sum(df$Gross[which(df$timeInter=='175-200')])
total_gross_200_225 = sum(df$Gross[which(df$timeInter=='200-225')])
total_gross_225_250 = sum(df$Gross[which(df$timeInter=='225-250')])
total_gross_250_275 = sum(df$Gross[which(df$timeInter=='250-275')])
total_gross_275_300 = sum(df$Gross[which(df$timeInter=='275-300')])
total_gross_300_325 = sum(df$Gross[which(df$timeInter=='300-325')])
total_gross_325 = sum(df$Gross[which(df$timeInter=='325')])
time_interval_labels = c('0-25',
'25-50',
'50-75',
'75-100',
'100-125',
'125-150',
'150-175',
'175-200',
'200-225',
'225-250',
'250-275',
'275-300',
'300-325',
'325')
totals_gross_time = c(total_gross_0_25,
total_gross_25_50,
total_gross_50_75,
total_gross_75_100,
total_gross_100_125,
total_gross_125_250,
total_gross_150_175,
total_gross_175_200,
total_gross_200_225,
total_gross_225_250,
total_gross_250_275,
total_gross_275_300,
total_gross_300_325,
total_gross_325)
gross_time_totals = data.frame(time_interval_labels = time_interval_labels, gross_Totals = totals_gross_time)
ggplot(gross_time_totals, aes(x = reorder(time_interval_labels, -gross_Totals), y = gross_Totals)) +
geom_bar(stat="identity") +
labs(x="Runtime (Minutes)",y="Gross Totals") +
ggtitle("Gross Total ($) Vs. Runtime (Minutes)")
#Mean
mean_gross_0_25 = mean(df$Gross[which(df$timeInter=='0-25')])
mean_gross_25_50 = mean(df$Gross[which(df$timeInter=='25-50')])
mean_gross_50_75 = mean(df$Gross[which(df$timeInter=='50-75')])
mean_gross_75_100 = mean(df$Gross[which(df$timeInter=='75-100')])
mean_gross_100_125 = mean(df$Gross[which(df$timeInter=='100-125')])
mean_gross_125_250 = mean(df$Gross[which(df$timeInter=='125-150')])
mean_gross_150_175 = mean(df$Gross[which(df$timeInter=='150-175')])
mean_gross_175_200 = mean(df$Gross[which(df$timeInter=='175-200')])
mean_gross_200_225 = mean(df$Gross[which(df$timeInter=='200-225')])
mean_gross_225_250 = mean(df$Gross[which(df$timeInter=='225-250')])
mean_gross_250_275 = mean(df$Gross[which(df$timeInter=='250-275')])
mean_gross_275_300 = mean(df$Gross[which(df$timeInter=='275-300')])
mean_gross_300_325 = mean(df$Gross[which(df$timeInter=='300-325')])
mean_gross_325 = mean(df$Gross[which(df$timeInter=='325')])
time_interval_mean_labels = c('0-25',
'25-50',
'50-75',
'75-100',
'100-125',
'125-150',
'150-175',
'175-200',
'200-225',
'225-250',
'250-275',
'275-300',
'300-325',
'325')
mean_gross_time = c(mean_gross_0_25,
mean_gross_25_50,
mean_gross_50_75,
mean_gross_75_100,
mean_gross_100_125,
mean_gross_125_250,
mean_gross_150_175,
mean_gross_175_200,
mean_gross_200_225,
mean_gross_225_250,
mean_gross_250_275,
mean_gross_275_300,
mean_gross_300_325,
mean_gross_325)
mean_time_totals = data.frame(time_interval_labels = time_interval_mean_labels, gross_Mean = mean_gross_time)
#KEEP
ggplot(mean_time_totals, aes(x = reorder(time_interval_labels, -gross_Mean), y = gross_Mean)) +
geom_bar(stat="identity") +
labs(x="Runtime (Minutes)",y="Gross Mean") +
ggtitle("Gross Mean ($) Vs. Runtime (Minutes)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
#USE as you can see most of the data points are to the left and the outliers are skewing the graph left so I decided to set a limit on the X axis for Gross.
ggplot(data=df,aes(x=Gross,y=Runtime))+
geom_point(alpha=1/10,position="jitter")+
scale_y_continuous(limits = c(0,250)) +
ggtitle("Runtime (Minutes) Vs Gross")
ggplot(data=df,aes(x=Gross,y=Runtime))+
geom_point(alpha=1/10,position="jitter")+
scale_y_continuous(limits = c(0,250)) +
scale_x_continuous(name = "Gross", limits = c(0,35000000)) +
ggtitle("Runtime (Minutes) Vs Gross ($): X-axis limited to 35M$")
ggplot(data = df, aes(x = Gross, y = Budget)) + geom_point() +
stat_smooth(color = "red", size = I(1), se = F) +
ggtitle("Gross ($) Vs Budget ($) Vs Runtime (Minutes)") +
facet_wrap(~timeInter)
ggplot(df, aes(log10(df$Budget), log10(df$Gross))) +
geom_point() +
stat_smooth(color = "red", size = I(2), se = F) +
ggtitle("Gross(log10) V. Budget(log10) Scatter Plot")
# USE
df$GenreCombined = ifelse(df$action == 1,"Action",
ifelse(df$comedy == 1,"Comedy",
ifelse(df$drama == 1,"Drama",
ifelse(df$adventure == 1,"Adventure",
ifelse(df$crime == 1,"Crime",
ifelse(df$romance == 1,"Romance",
ifelse(df$thriller == 1,"Thriller",
ifelse(df$horror == 1,"Horror",
ifelse(df$scifi == 1,"Scifi",
ifelse(df$mystery == 1,"Mystery",NA))))))))))
df2 = subset(df, !is.na(df$GenreCombined))
plot1 = ggplot(df2, aes(log10(Budget), log10(Gross)))+
geom_point() +
labs(x="Budget (log10)",y="Gross (log10)") +
stat_smooth(color = "red", size = I(1), se = F) +
ggtitle("Budget (log 10) Vs Gross (log 10) Faceted by Runtime and Genre") +
facet_wrap(timeInter~GenreCombined)
plot(plot1)
# TODO: Investigate if Gross Revenue is related to Release Month
month_split = function(col1){
seq_Col = seq_along(col1)
split = c()
for(i in seq_Col){
split_On_Dashes = strsplit(as.character(df$Released[i]), '-')[[1]]
split = append(split,as.numeric(split_On_Dashes)[2])
}
return (split)
}
month_split_numbers = month_split(df$Released)
df$monthReleased = month_split_numbers
df = subset(df, !is.na(df$monthReleased))
ggplot(df, aes((df$monthReleased), (df$Gross))) +
geom_bar(stat="identity") +
scale_x_continuous(name = "Month Released", breaks = seq(1, 12, by = 1)) +
labs(y="Gross($)") +
ggtitle("Gross($) Vs. Month Released")
ggplot(df, aes(monthReleased, log10(df$Gross))) +
geom_point() +
scale_x_continuous(name = "Month Released", breaks = seq(1, 12, by = 1)) +
stat_smooth(color = "red", size = I(2), se = F) +
ggtitle("Gross(log10) V. Budget(log10) Scatter Plot")
# TODO: Convert Awards to 2 numeric columns: wins and nominations
wins = c()
nominations = c()
for(i in seq_along(df$Awards)){
winsHolder = 0
nominationsHolder = 0
pattern1 ="((\\d*?) (wins|win))"
pattern2 ="((\\d*?) (nominations|nomination))"
pattern3 ="Nominated for ((\\d*?) (Primetime|Golden Globes|Golden Globe|Oscars|Oscar|BAFTA))"
pattern4 = "Won ((\\d*?) (Primetime|Golden Globes|Golden Globe|Oscars|Oscar|BAFTA))"
if((!is.na(as.numeric(str_match(df$Awards[i],pattern4)[1,3])))){
winsHolder = winsHolder + as.numeric(str_match(df$Awards[i],pattern4)[1,3])
}
if((!is.na(as.numeric(str_match(df$Awards[i],pattern1)[1,3])))){
winsHolder = winsHolder + as.numeric(str_match(df$Awards[i],pattern1)[1,3])
}
if ((!is.na(as.numeric(str_match(df$Awards[i],pattern3)[1,3])))){
nominationsHolder = nominationsHolder + as.numeric(str_match(df$Awards[i],pattern3)[1,3])
}
if ((!is.na(as.numeric(str_match(df$Awards[i],pattern2)[1,3])))){
nominationsHolder = nominationsHolder + as.numeric(str_match(df$Awards[i],pattern2)[1,3])
}
if (is.na(as.numeric(str_match(df$Awards[i],pattern1)[1,3])) & is.na(as.numeric(str_match(df$Awards[i],pattern4)[1,3])) ){
winsHolder = 0
}
if (is.na(as.numeric(str_match(df$Awards[i],pattern3)[1,3])) & is.na(as.numeric(str_match(df$Awards[i],pattern2)[1,3]))){
nominationsHolder = 0
}
wins = append(wins,winsHolder)
nominations = append(nominations,nominationsHolder)
winsHolder = 0
nominationsHolder = 0
}
wins = data.frame(wins, df$imdbID)
colnames(wins)[2] = "imdbID"
nominations = data.frame(nominations, df$imdbID)
colnames(nominations)[2] = "imdbID"
df = merge(df,wins,by= "imdbID")
df = merge(df,nominations,by= "imdbID")
totalNonZeroValuesWinsorNominations = 0
for (i in seq_along(df$wins)){
if(df$wins[i] > 0 || df$nominations[i] > 0){
totalNonZeroValuesWinsorNominations = totalNonZeroValuesWinsorNominations + 1
}
}
print (totalNonZeroValuesWinsorNominations)
# TODO: Plot Gross revenue against wins and nominations
ggplot(df, aes(df$Gross, df$wins)) +
geom_point() +
labs(x="Gross", y="Wins") +
stat_smooth(color = "red", size = I(1), se = F) +
ggtitle("Gross V. Wins")
ggplot(df, aes(df$Gross, df$nominations)) +
geom_point() +
labs(x="Gross", y="Nominations") +
stat_smooth(color = "red", size = I(1), se = F) +
ggtitle("Gross V. Nominations")
newdf = data.frame(df$Gross,df$wins,df$nominations)
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
#http://padamson.github.io/r/ggally/ggplot2/ggpairs/2016/02/16/multiple-regression-lines-with-ggpairs.html
ggpairs(newdf,columnLabels = c("Gross", "Wins", "Nominations"),
title="Gross V Wins V Nominations", lower = list(continuous = my_fn))
#This graph is heavily skewed by outliers
ggplot(df,aes(df$wins,df$nominations)) +
geom_point(alpha=1/15, position="jitter", aes(size =df$Gross)) +
scale_x_continuous(name = "Wins") +
scale_y_continuous(name = "Nominations") +
ggtitle("Nominations V Wins V Gross")
#zoomed
ggplot(df,aes(df$wins,df$nominations)) +
geom_point(alpha=1/15, position="jitter", aes(size =df$Gross)) +
scale_x_continuous(name = "Wins", limits = c(0,50)) +
scale_y_continuous(name = "Nominations", limits = c(0,50)) +
ggtitle("Nominations V Wins V Gross Constrained by 50")
#zoomed
ggplot(df,aes(df$wins,df$nominations)) +
geom_point(alpha=1/15, position="jitter", aes(size =df$Gross)) +
scale_x_continuous(name = "Wins", limits = c(0,10)) +
scale_y_continuous(name = "Nominations", limits = c(0,10)) +
ggtitle("Nominations V Wins V Gross Constrained by 10")
# TODO: Illustrate how ratings from IMDb and Rotten Tomatoes are related
dfVotesRatingsUserVCritic = data.frame(df$imdbRating,df$imdbVotes, df$tomatoMeter, df$tomatoRating, df$tomatoReviews)
dfVotesRatingsUserVCritic = dfVotesRatingsUserVCritic[complete.cases(dfVotesRatingsUserVCritic),]
ggpairs(dfVotesRatingsUserVCritic,columnLabels = c("IMDB-Rating", "IMDB-Votes", "Tomato-Meter", "Tomato-Rating","Tomato-Reviews"),
title="IMDB V Rotten Tomatoes Critics", lower = list(continuous = my_fn))
dfVotesRatingsUserVUser = data.frame(df$imdbRating,df$imdbVotes, df$tomatoUserMeter, df$tomatoUserRating, df$tomatoUserReviews)
dfVotesRatingsUserVUser = dfVotesRatingsUserVUser[complete.cases(dfVotesRatingsUserVUser),]
ggpairs(dfVotesRatingsUserVUser,columnLabels = c("IMDB-Rating", "IMDB-Votes", "Tomato-UserMeter", "Tomato-UserRating","Tomato-UserReviews"),
title="IMDB V Rotten Tomatoes Users", lower = list(continuous = my_fn))
# TODO: Show how ratings and awards are related
dfAwardsRatingsIMDBUser = data.frame(df$wins, df$nominations,df$imdbRating,df$imdbVotes)
ggpairs(dfAwardsRatingsIMDBUser, columnLabels = c("Wins", "Nominations", "IMDB-Rating", "IMDB-Votes"),
title="IMDB V Wins V Nominations", lower = list(continuous = my_fn))
dfAwardsRatingsRottenCritics = data.frame(df$wins, df$nominations,df$tomatoMeter, df$tomatoRating, df$tomatoReviews)
ggpairs(dfAwardsRatingsRottenCritics, columnLabels = c("Wins", "Nominations", "Tomato Meter", "Tomato Rating", "Tomato Reviews"),
title="Rotten Tomatoes Critics V Wins V Nominations", lower = list(continuous = my_fn))
dfAwardsRatingsRottenUsers = data.frame(df$wins, df$nominations, df$tomatoUserMeter, df$tomatoUserRating, df$tomatoUserReviews)
ggpairs(dfAwardsRatingsRottenCritics, columnLabels = c("Wins", "Nominations", "Tomato-UserMeter", "Tomato-UserRating","Tomato-UserReviews"),
title="Rotten Tomatoes Users V Wins V Nominations", lower = list(continuous = my_fn))
# TODO: Find and illustrate two expected insights
ggplot(data=df,aes(x=Year,y=df$imdbRating))+
geom_bar(stat = "identity")+
scale_x_continuous(name = "Years by Decade", breaks = seq(1888, 2018, by = 10)) +
ggtitle("IMDB Rating count V. Decades")
language = as.data.frame(table(df$Language))
language = language[order(language$Freq),]
ggplot(language, aes(x = reorder(factor(Var1), Freq), y = Freq)) +
geom_bar(stat = "identity") +
labs(x="Languages") +
ggtitle("Feq of languages in Movies")
language  = language[491:498, ]
ggplot(language, aes(x = reorder(factor(Var1), Freq), y = Freq)) +
geom_bar(stat = "identity") +
labs(x="Languages") +
ggtitle("Feq of top 8 languages in Movies")
# TODO: Find and illustrate one unexpected insight
ratings_String = function(col){
length_Col = seq_along(col)
ratings = c()
for(i in length_Col){
if(grepl("APPROVED|UNRATED|PASSED|NOT RATED|N/A", df$Rated[i])){
ratings = append(ratings, NA)
}
else {
ratings = append(ratings,df$Rated[i])
}
}
return (ratings)
}
rated_movies_with_na = data.frame(ratings_String(df$Rated))
rated_movies_with_na = data.frame(rated_movies_with_na, df$imdbID)
colnames(rated_movies_with_na)[1] = "Rated"
colnames(rated_movies_with_na)[2] = "imdbID"
rated_movies_with_na_merged = merge(df,rated_movies_with_na,by= "imdbID")
dfRatings = rated_movies_with_na_merged[-c(4)]
colnames(dfRatings)[68] = "Rated"
dfRatings = subset(dfRatings, !is.na(dfRatings$Rated))
ggplot(data=dfRatings,aes(x=Rated,y=Gross))+
geom_point(alpha=1/10,position="jitter")+
ggtitle("Gross ($) Vs. Movie Ratings")
sumRRated = mean(dfRatings$Gross[which(dfRatings$Rated=='R')])
sumPG13Rated = mean(dfRatings$Gross[which(dfRatings$Rated=='PG-13')])
sumPGRated = mean(dfRatings$Gross[which(dfRatings$Rated=='PG')])
sumGRated = mean(dfRatings$Gross[which(dfRatings$Rated=='G')])
sumMRated = mean(dfRatings$Gross[which(dfRatings$Rated=='M')])
sumNC17Rated = mean(dfRatings$Gross[which(dfRatings$Rated=='NC-17')])
sumGPRated = mean(dfRatings$Gross[which(dfRatings$Rated=='GP')])
sumTV14Rated = mean(dfRatings$Gross[which(dfRatings$Rated=='TV-14')])
sumTVGRated = mean(dfRatings$Gross[which(dfRatings$Rated=='TV-G')])
sumTVPGRated = mean(dfRatings$Gross[which(dfRatings$Rated=='TV-PG')])
sumXRated = mean(dfRatings$Gross[which(dfRatings$Rated=='X')])
rated_mean_labels = c('R',
'PG-13',
'PG',
'G',
'M',
'NC-17',
'GP',
'TV-14',
'TV-G',
'TV-PG',
'X')
mean_gross_rated = c(sumRRated,
sumPG13Rated,
sumPGRated,
sumGRated,
sumMRated,
sumNC17Rated,
sumGPRated,
sumTV14Rated,
sumTVGRated,
sumTVPGRated,
sumXRated)
mean_rating_totals = data.frame(Rating_Labels = rated_mean_labels, Gross_Mean = mean_gross_rated)
ggplot(mean_rating_totals, aes(x = reorder(Rating_Labels, -Gross_Mean), y = Gross_Mean)) +
geom_bar(stat="identity") +
labs(x="Ratings",y="Gross") +
ggtitle("Gross Mean Totals ($) Vs. Movie Ratings")
load('movies_merged')
